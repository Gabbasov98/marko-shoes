$("._tab").click(function() {
    let parentBlock = $(this).parents("._tabs-parent")
    let tabId = $(this).attr("data-tab")
    $(parentBlock).find("._tab").removeClass("_active")
    $(this).addClass("_active")
    $(parentBlock).find(".tab-content").removeClass("_active")
    $(parentBlock).find(`.${tabId}`).addClass("_active")
})

$(".qa-card__show").click(function () {
    $(this).parents(".qa-card").toggleClass("_active")
    $(this).siblings(".qa-card__hidden").slideToggle()
})

/*$(document).on('click', '.hint-input__option',function () {
    let parent = $(this).parents(".hint-input")
    let input = $(parent).find(".fg input")
    $(parent).removeClass("_open")
    $(input).val($(this).find(".text16").text())
    $(".hint-input__option").removeClass("_selected")
    $(this).addClass("_selected")
})*/

/*$(document).on('input', '.fg input',function () {
    let parent = $(this).parents(".hint-input")
    if($(this).val().trim() !== ""){
        $(parent).addClass("_open")
    }else{
        $(parent).removeClass("_open")
    }
})*/

$(document).mouseup( function(e){
    let div = $( ".hint-input" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_open")){
            $(div).removeClass("_open")
        }
    }
});

$(document).on('click', '.rating-input__item', function(e) {
    let ratingItem = parseInt($(this).attr("data-rating-value"))
    $(this).parent(".rating-input").attr("data-total-rating", ratingItem)
    $(this).siblings(".rating-input__field").val(ratingItem)
})

$(".map-modal__tab").click(function () {
    let id = +$(this).attr("data-tab")
    $(".map-modal__tab").removeClass("_active")
    $(this).addClass("_active")
    if(id === 2){
        $(".map-modal").addClass("_show-list")
    }else{
        $(".map-modal").removeClass("_show-list")
    }
})

$(".burger").click(function () {
    $(".header").toggleClass("_open")
    $("body").toggleClass("fixed-body")
})


function Sliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".slider")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)

        SlidersArray[index] = new Swiper(`.slider[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            watchSlidesProgress: true,
            preventClicks :true,
            a11y: false,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,

            navigation: {
                nextEl: `.slider[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.slider[data-slider-id="${index}"] .swiper-button-prev`,
            },
            pagination: {
                el: `.slider[data-slider-id="${index}"] .swiper-pagination`,
                type: 'bullets',
                clickable: true,
            },
        })
    })
}

function gallery() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".gallery")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let gallery = {
            mySwiper: {},
            mySwiper2: {}
        }

        gallery.mySwiper = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper`, {
            spaceBetween: 0,
            slidesPerView: "auto",
            freeMode: true,
            watchSlidesProgress: true,
            direction: "vertical",
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });
        gallery.mySwiper2 = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper2`, {
            spaceBetween: 0,
            direction: "vertical",
            loop: true,
            navigation: {
                nextEl: `.gallery[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.gallery[data-slider-id="${index}"] .swiper-button-prev`,
            },
            thumbs: {
                swiper:  gallery.mySwiper,
            },
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });

        SlidersArray[index] = gallery
    })

}


Sliders()
gallery()

$(".profile-nav__link,.profile-nav__sublink").each(function (i,el) {
    if($(el).hasClass("_active")){
        $(".profile-nav__current").html($(el).html())
    }
})

$(".profile-nav__mob").click(function () {
    $(".profile-nav").toggleClass("_open")
})

$(".lk-filter__toggle").click(function () {
    $(this).toggleClass("_open")
    $(".lk-filter__bottom").slideToggle()
})

$(document).mouseup( function(e){
    var div = $( ".profile-nav" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_open")){
            $(div).removeClass("_open")
        }
    }
});


let startDate = new Date;
let dateFields = document.querySelectorAll(".date-input")
dateFields.forEach(field => {
    new AirDatepicker(field, {
        locale: {
            days: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
            daysShort: ['Вос', 'Пон', 'Вто', 'Сре', 'Чет', 'Пят', 'Суб'],
            daysMin: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
            months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
            monthsShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],
            today: 'Сегодня',
            clear: 'Очистить',
            dateFormat: 'dd.MM.yyyy',
            timeFormat: 'HH:mm',
            firstDay: 1,
        },
        autoClose: true,
        // inline: true,
        // isMobile: true,
        startDate,
        // multipleDates: true ,
        // selectedDates: [startDate]
    })
})

let mapCenterCoord = [54.778232, 32.051377]
let mapPoints = [
    {
        mapIcon: 'img/mark.svg',
        logo: 'img/logo2.webp',
        img: 'img/place.webp',
        title: "Пункт выдачи заказов СДЭК",
        site: "cdek.ru/ru",
        phone: "+7 (930) 675-44-22",
        workTime: 'пн-пт 10:00–20:00',
        workTime2: 'сб,вс 10:00–18:00',
        address: "Колхозная ул., 8, Смоленск",
        cords: [54.767685, 32.036555]
    },
    {
        mapIcon: 'img/mark.svg',
        logo: 'img/logo2.webp',
        img: 'img/place.webp',
        title: "Пункт выдачи заказов СДЭК",
        site: "cdek.ru/ru",
        phone: "+7 (930) 675-44-22",
        workTime: 'пн-пт 10:00–20:00',
        workTime2: 'сб,вс 10:00–18:00',
        address: "ул. Полины Осипенко, 45, Смоленск",
        cords: [54.795847, 32.076755]
    },
]

if( document.querySelector("#map") ){
    ymaps.ready(init);
}






function init() {
    if(!document.querySelector("#map")){
        return
    }

    let myMap = new ymaps.Map("map", {
        center: mapCenterCoord,
        zoom: 13,
        controls: []
    });

    // myMap.behaviors.disable('scrollZoom');

    function renderCard (el){
        return `
                <div class="place-card">
                    <div class="place-card__logo">
                        <img src="${el.logo}" alt="">
                    </div>
                    <div class="place-card__img">
                        <img src="${el.img}" alt="">
                    </div>
                    <div class="place-card__title text14 bold-text">
                        ${el.title}
                    </div>
                    <div class="place-card__content text14">
                        <div>
                            ${el.site} <br>
                            <a href="tel:${el.phone}">${el.phone}</a>
                        </div>
                        <div>
                            ${el.workTime} <br>
                            ${el.workTime2}
                        </div>
                        <div>
                            ${el.address}
                        </div>
                    </div>
                    <div class="place-card__nav">
                        <button class="place-card__btn m-btn m-btn-red-outline">
                            <span>Выбрать пункт</span>
                        </button>
                    </div>
                </div>
            `
    }

    for (let i = 0; i++; i< mapPoints.length-1){
        console.log(i)
    }

    mapPoints.forEach((el,index) => {
        let placeMark = new ymaps.Placemark(el.cords, {
                balloonContentHeader: ``,
                // balloonContentBody: '',
                balloonContentBody: renderCard(el),
                balloonContentFooter: '',
                hintContent: '',
            },
            {
                iconLayout: 'default#image',
                iconImageHref: el.mapIcon,
                iconImageSize: [30, 30],
            }
        );
        $(`.point-item[data-id="${index}"]`).click(function () {
            placeMark.balloon.open();
            $(".point-item").removeClass("_active")
            $(this).addClass("_active")
        })
        myMap.geoObjects.add(placeMark);


    })





}

$(".head-check").change(function () {
    $(this).removeClass("_halfChecked")
    if($(this).prop("checked")){
        $(".row-check").each(function (i,el) {
            $(el).prop("checked",true)
            $(".cart-nav").addClass("_active")
        })
    } else{
        $(".row-check").each(function (i,el) {
            $(el).prop("checked",false)
            $(".cart-nav").removeClass("_active")
        })
    }
})

$(".row-check").change(function () {
    setCartCheckboxes()
})

setCartCheckboxes()


function setCartCheckboxes(){
    let checked = []

    $(".row-check").each(function (i,el) {
        checked.push($(el).prop("checked"))
    })


    if(checked.indexOf(true) === -1){
        $(".head-check").removeClass("_halfChecked")
        $(".head-check").prop("checked",false)
        $(".cart-nav").removeClass("_active")
        return
    }

    $(".cart-nav").addClass("_active")
    if(checked.indexOf(false) === -1){
        $(".head-check").removeClass("_halfChecked")
        $(".head-check").prop("checked",true)
        return
    }

    $(".head-check").addClass("_halfChecked")
}

let fileInput = document.querySelector("[data-upload-id='file-input']")

if(fileInput){
    console.log(fileInput)
    const upload = new FileUploadWithPreview.FileUploadWithPreview('file-input');

    upload.options.multiple = true

    $(document).on('change', '.input-container input', function(e) {
        $(this).parents(".file-input").addClass("_uploaded")
    })

    $(document).on('click', '.image-preview-item-clear', function(e) {
        let count = $(this).parents(".file-input").find(".image-preview-item").length
        if(count === 1){
            $(this).parents(".file-input").removeClass("_uploaded")
        }
    })
}



let body = document.querySelector("body")
let modalTogglers = document.querySelectorAll("[data-modal]")
let modals = document.querySelectorAll(".m-modal")

modalTogglers.forEach(el => {
    el.onclick = function () {
        let modalId = el.getAttribute("data-modal")
        openModal(modalId)
    }
})

function closeModals() {
    modals.forEach(modal => {
        modal.classList.remove("_active")
        body.classList.remove("fixed-body2")
    })
}

function openModal(modalId) {
    closeModals()
    let modal = document.querySelector(`#${modalId}`)
    let closeButtons = modal.querySelectorAll(`._close-modal`)

    modal.classList.add("_active")
    body.classList.add("fixed-body2")


    closeButtons.forEach(btn => {
        btn.onclick = ()=> {
            modal.classList.remove("_active")
            body.classList.remove("fixed-body2")
        }
    })
}

var getScrollBarSize = (function() {
    var el = window.document.createElement('textarea'), style = {
        'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
        'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
        'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
    }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;

    for (var key in style) {
        if (style.hasOwnProperty(key)) {
            el.style[key] = style[key];
        }
    }

    return function() {
        var size = null;
        if (support && window.document.body) {
            window.document.body.appendChild(el);
            size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
            window.document.body.removeChild(el);
        }

        document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
        return size;
    };
})();


window.addEventListener('DOMContentLoaded', () => {
    fix100vh();
    window.addEventListener('resize', () => {
        fix100vh();
        getScrollBarSize()
    })

    getScrollBarSize()

    $(".fg select").niceSelect()
    $('input[type="tel"]').mask('+7 (999) 999-99-99', { autoclear: false }, { placeholder: '+7 (   )    -  -  ' });
})

function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

//# sourceMappingURL=../sourcemaps/main.min.js.map
